import { Injectable } from "@nestjs/common";
import * as fs from "fs";
import { HttpService } from "@nestjs/axios";
import { firstValueFrom } from "rxjs";

const PDFParser = require("pdf2json");

@Injectable()
export class UploadService {
	private templateJSON: any;

	constructor(private readonly httpService: HttpService) {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω JSON –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
		this.templateJSON = JSON.parse(fs.readFileSync("data.json", "utf8"));
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ AI, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
	async processFile(filePath: string, useAI: boolean): Promise<any> {
		const parsedData = await this.parsePDF(filePath);

		if (useAI) {
			console.log("üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ AI –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
			const modifiedData = await this.modifyDataWithAI(parsedData);
			return modifiedData;
		}

		return parsedData;
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF
	private parsePDF(filePath: string): Promise<any> {
		return new Promise((resolve, reject) => {
			const pdfParser = new PDFParser();

			pdfParser.on("pdfParser_dataError", (err) => reject(err.parserError));
			pdfParser.on("pdfParser_dataReady", (pdfData) => {
				const pages = pdfData.Pages;
				if (!pages || pages.length === 0) {
					return reject(new Error("PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."));
				}

				const extractedData: string[] = [];

				pages.forEach((page) => {
					const rows: Record<number, string[]> = {};
					page.Texts.forEach((text) => {
						const content = text.R.map((r) => decodeURIComponent(r.T)).join("");
						const y = Math.round(text.y * 100);
						if (!rows[y]) rows[y] = [];
						rows[y].push(content);
					});

					extractedData.push(...Object.values(rows).map((row) => row.join(" ")));
				});

				resolve(this.fillTemplate(extractedData));
			});

			pdfParser.loadPDF(filePath);
		});
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI (–Ω–∞–ø—Ä–∏–º–µ—Ä, DeepSeek)
	public async modifyDataWithAI(data: any): Promise<any> {
		return data;
		const url = "https://api.deepseek.ai/modify"; // URL AI API
		try {
			const response = await firstValueFrom(
				this.httpService.post(url, { data }) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ AI
			);
			return response.data; // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI:", error);
			throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI");
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	private fillTemplate(extractedData: string[]): any {
		const filledTemplate = JSON.parse(JSON.stringify(this.templateJSON));

		extractedData.forEach((line) => {
			line = line.trim();

			if (line.includes("–û–û–û")) {
				filledTemplate.header.company.name = line;
			} else if (line.includes("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ‚Ññ")) {
				filledTemplate.header.company.regNum = line.split("‚Ññ")[1]?.trim() || "";
			} else if (line.includes("–ø–æ –∞–¥—Ä–µ—Å—É:")) {
				const address = line.split(":")[1].trim();
				const addressParts = address.split(",");
				filledTemplate.addressData.street = addressParts[0]?.trim() || "";
				filledTemplate.addressData.house = addressParts[1]?.trim() || "";
			} else if (line.includes("–°–µ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞:")) {
				filledTemplate.objectPasport.projectSeria = line.split(":")[1]?.trim() || "";
			} else if (line.includes("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏")) {
				filledTemplate.objectPasport.buildYear.initial = line.split(":")[1]?.trim() || "";
			} else if (line.includes("–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–∑–Ω–æ—Å")) {
				const match = line.match(/\d+,\d+/);
				filledTemplate.objectPasport.deterioration.percent = match ? parseFloat(match[0].replace(",", ".")) : 0;
			}
		});

		return filledTemplate;
	}
}
