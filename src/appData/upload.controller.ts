import { Controller, Post, Body } from "@nestjs/common";
import * as fs from "fs";
import * as path from "path";
import { UploadService } from "./upload.service"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UploadService
import { API_ROUTES } from "src/config/api.config";

@Controller("api")
export class UploadController {
	constructor(private readonly uploadService: UploadService) {} // –í–Ω–µ–¥—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å

	@Post(API_ROUTES.app.uploadPDF)
	async uploadPdf(@Body() body: { fileName: string; fileData: string; useAI: boolean }) {
		if (!body || !body.fileName || !body.fileData) {
			console.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.");
			return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö" };
		}

		try {
			console.log(`üì• –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ PDF –¥–ª—è —Ñ–∞–π–ª–∞: ${body.fileName}`);

			// –£–±–∏—Ä–∞–µ–º data:application/pdf;base64,
			const base64Data = body.fileData.split(",")[1];
			const buffer = Buffer.from(base64Data, "base64");

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
			const filePath = path.join(__dirname, "../../uploads", body.fileName);
			fs.writeFileSync(filePath, buffer);
			console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);

			// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
			console.log(`–ü–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...`);
			const parsedData = await this.uploadService.processFile(filePath, body.useAI);
			console.log(`–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω`);

			// –ï—Å–ª–∏ AI –≤–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DeepSeek –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è
			if (body.useAI) {
				console.log("üß† AI –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DeepSeek...");
				const modifiedData = await this.uploadService.modifyDataWithAI(parsedData);
				return { success: true, data: modifiedData };
			}

			// –ï—Å–ª–∏ AI –≤—ã–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
			return { success: true, data: parsedData.data.surveyResults };
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Base64 PDF:", error);
			return { success: false, error: error.message };
		}
	}
}
