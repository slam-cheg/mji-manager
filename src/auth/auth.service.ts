import { Injectable, UnauthorizedException, ForbiddenException, BadRequestException } from "@nestjs/common";
import { UserService } from "../user/user.service";
import { JwtService } from "@nestjs/jwt";
import * as bcrypt from "bcrypt";
import { writeLog } from "../utils/writeLog";
import { timeStamp } from "../utils/timeStamp";
import { IUserResponse } from "./auth.types";
import { IRegisterUserDTO } from "./dto/register-user.dto";
import { ICreateUserDTO } from "../user/dto/create-user.dto";
import { keygen } from "src/utils/keygen";

@Injectable()
export class AuthService {
	constructor(
		private readonly userService: UserService,
		private readonly jwtService: JwtService
	) {}

	// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
	private generateTokens(user: any) {
		const accessToken = this.jwtService.sign(
			{ login: user.login, fio: user.fio, isAdmin: user.isAdmin },
			{ expiresIn: "1h" } // üî• Access-—Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å
		);

		const refreshToken = this.jwtService.sign(
			{ login: user.login },
			{ expiresIn: "14d" } // üî• Refresh-—Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 14 –¥–Ω–µ–π
		);

		return { accessToken, refreshToken };
	}

	// ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	async validateUser(requestBody: { data: { login: string; password: string } }): Promise<{ accessToken: string; refreshToken: string }> {
		const { login, password } = requestBody.data;
		console.log(`–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞: ${login} . . .`);

		const user = await this.userService.findByLogin(login);
		if (!user) {
			console.log(`–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${login} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
			throw new UnauthorizedException({ status: "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
		}

		// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
		const isPasswordValid = await bcrypt.compare(password, user.password);
		if (!isPasswordValid) {
			console.log(user)
			console.log(`–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.`);
			throw new UnauthorizedException({ status: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
		}

		if (!user.activated) {
			console.log(`–û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`);
			console.log(user)
			throw new ForbiddenException({ status: "–û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" });
		}

		// ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access –∏ refresh —Ç–æ–∫–µ–Ω—ã
		const { accessToken, refreshToken } = this.generateTokens(user);

		// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh-—Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
		await this.userService.updateUserRefreshToken(login, refreshToken);

		writeLog({ status: `–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç ${login} —É—Å–ø–µ—à–µ–Ω`, timeStamp: timeStamp() }, "logIn");
		console.log(`–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç ${login} —É—Å–ø–µ—à–µ–Ω.`);
		return { accessToken, refreshToken };
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ refresh-—Ç–æ–∫–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞
	async refreshAccessToken(refreshToken: string) {
		try {
			const decoded = this.jwtService.verify(refreshToken); // ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º refreshToken
			const user = await this.userService.findByLogin(decoded.login);

			if (!user || user.refreshToken !== refreshToken) {
				throw new UnauthorizedException("‚ùå Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
			}

			// üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π accessToken
			const newAccessToken = this.jwtService.sign({ login: user.login, fio: user.fio, isAdmin: user.isAdmin }, { expiresIn: "14d" });

			return { accessToken: newAccessToken };
		} catch (error) {
			throw new UnauthorizedException("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞");
		}
	}

	async activateUser(login: string, password: string, key: string) {
		console.log(`–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${login} . . .`);

		const user = await this.userService.findByLogin(login);
		if (!user) {
			throw new UnauthorizedException({ status: "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
		}

		if (!(await bcrypt.compare(password, user.password))) {
			throw new UnauthorizedException({ status: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
		}

		let activationStatus = {
			status: `–ê–∫–∫–∞—É–Ω—Ç ${login} –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á`,
			boolean: false,
			activated: false,
			timeStamp: timeStamp(),
		};

		if (user.activated) {
			activationStatus = {
				status: `–ê–∫–∫–∞—É–Ω—Ç ${login} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`,
				boolean: true,
				activated: true,
				timeStamp: timeStamp(),
			};
		} else if (user.key === key) {
			await this.userService.updateUserActivation(login, true);
			activationStatus = {
				status: `–ê–∫–∫–∞—É–Ω—Ç ${login} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`,
				boolean: true,
				activated: true,
				timeStamp: timeStamp(),
			};
		} else {
			activationStatus.status = `–ê–∫–∫–∞—É–Ω—Ç ${login} –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–∞–∫–æ–π –∫–ª—é—á –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`;
		}

		writeLog(activationStatus, "Activation");
		return activationStatus;
	}

	async registerUser(registerDTO: IRegisterUserDTO) {
		const { login, password, fio } = registerDTO;
		console.log(`–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${login}`);

		const existingUser = await this.userService.findByLogin(login);
		if (existingUser) {
			throw new BadRequestException({
				status: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${login} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ. –¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`,
				registration: false,
				key: "Not generated",
				timeStamp: timeStamp(),
			});
		}

		const hashedPassword = await bcrypt.hash(password, 10);
		const activationKey = keygen();

		const newUser: ICreateUserDTO = {
			login,
			password: hashedPassword,
			fio,
			key: activationKey,
			activated: false,
		};

		await this.userService.createUser(newUser);

		const response = {
			status: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${login} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ`,
			registration: true,
			key: activationKey,
			timeStamp: timeStamp(),
		};

		writeLog(response, "Registration");

		return response;
	}
}
